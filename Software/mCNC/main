#include <AccelStepper.h>
#include <math.h>

// Pin definitions
const int MOTOR_A_STEP_PIN = 11;
const int MOTOR_A_DIR_PIN = 12;
const int MOTOR_B_STEP_PIN = 13;
const int MOTOR_B_DIR_PIN = 14;
const int Z_SOLENOID_PIN = 15; // Solenoid valve for pneumatic cylinder
const int SPINDLE_PIN = 16;
const int X_LIMIT_PIN = 2;
const int Y_LIMIT_PIN = 3;

// Motion parameters
float currentX = 0.0, currentY = 0.0, currentZ =0.0, currentSpindle = 0.0;  // Current position in mm
float stepsPerMM = 158.0;             // Adjust this based on your hardware (steps/mm)
float feedRate = 1000.0;                // Default feed rate in steps/sec
float accel = 600.0;                    //default accel
float G0Speed = 5000;                  //default speed for G0
bool isHomed = false;                 // Homing state

//structures
struct motorSteps{
  long stepsA;
  long stepsB;
  float speedA;
  float speedB;
  float accelA;
  float accelB;
};


// Create AccelStepper objects for motors A and B
AccelStepper motorA(AccelStepper::DRIVER, MOTOR_A_STEP_PIN, MOTOR_A_DIR_PIN);
AccelStepper motorB(AccelStepper::DRIVER, MOTOR_B_STEP_PIN, MOTOR_B_DIR_PIN);

// Check limit switches and return true if all limits are OK
bool checkLimitSwitches() {
  if (digitalRead(X_LIMIT_PIN) == LOW || digitalRead(Y_LIMIT_PIN) == LOW) {
    Serial.println("Limit switch triggered! Motion aborted.");
    motorA.stop();
    motorB.stop();
    return false;
  }
  return true;
}

//get steps required based on motor configuration
motorSteps getMotorSteps(float x, float y){
  motorSteps returnValue;
  float dX = x - currentX;
  float dY = y - currentY;
  float stepsA = (dX+dY) * stepsPerMM;
  float stepsB = (dX-dY) * stepsPerMM;
  float maxSteps = max(abs(stepsA), abs(stepsB));
  float modifierA = (abs(stepsA)/maxSteps);
  float modifierB = (abs(stepsB)/maxSteps);
  

  returnValue.speedA = modifierA * (feedRate * stepsPerMM) / 60.0;
  returnValue.speedB = modifierB * (feedRate * stepsPerMM) / 60.0;
  returnValue.accelA = modifierA * accel;
  returnValue.accelB = modifierB * accel;
  returnValue.stepsA = long(stepsA);
  returnValue.stepsB = long(stepsB);
  return returnValue;
}


// Non-interpolated rapid move (G0)
bool rapidMove(float targetX, float targetY) {

  motorSteps movementData = getMotorSteps(targetX,targetY);
  
  motorA.move(movementData.stepsA);
  motorB.move(movementData.stepsB);

  motorA.setMaxSpeed(G0Speed);
  motorB.setMaxSpeed(G0Speed);

  motorA.setAcceleration(accel);
  motorB.setAcceleration(accel);

  while (motorA.isRunning() || motorB.isRunning()) {
    if (!checkLimitSwitches()) {
      return false;
    }
    motorA.run();
    motorB.run();
  }

  currentX = targetX;
  currentY = targetY;
  return true;
}

// Interpolated linear move (G1)
bool linearMove(float targetX, float targetY) {

  motorSteps movementData = getMotorSteps(targetX,targetY);

  motorA.move(movementData.stepsA);
  motorB.move(movementData.stepsB);

  motorA.setMaxSpeed(movementData.speedA);
  motorB.setMaxSpeed(movementData.speedB);

  motorA.setAcceleration(movementData.accelA);
  motorB.setAcceleration(movementData.accelB);

  while (motorA.isRunning() || motorB.isRunning()) {
    if (!checkLimitSwitches()) {
      return false;
    }
    motorA.run();
    motorB.run();
  }

  currentX = targetX;
  currentY = targetY;
  return true;
}


// Control pneumatic cylinder for Z-axis
bool zMove(float targetZ) {
  if (targetZ > 0){
    digitalWrite(Z_SOLENOID_PIN, HIGH);
  }else{
    digitalWrite(Z_SOLENOID_PIN, LOW);
  }
  //check if extended here
  currentZ = targetZ;
  return true;
}

// Perform homing (G28)
void homeAxes() {
  Serial.println("Homing axes...");
  zMove(false);
  motorA.setSpeed(-100);
  motorB.setSpeed(-100);

  while (digitalRead(X_LIMIT_PIN) == HIGH || digitalRead(Y_LIMIT_PIN) == HIGH) {
    if (digitalRead(X_LIMIT_PIN) == HIGH) motorA.runSpeed();
    if (digitalRead(Y_LIMIT_PIN) == HIGH) motorB.runSpeed();
  }

  motorA.stop();
  motorB.stop();
  currentX = 0.0;
  currentY = 0.0;
  isHomed = true;
  Serial.println("Homing complete.");
}

// Parse G-code
void parseGCode(String gcode) {
  gcode.trim();
  if (gcode.startsWith("G")) {
    int command = gcode.substring(1, gcode.indexOf(' ')).toInt();
    float targetX = currentX, targetY = currentY, targetZ = currentZ, centerX, centerY;
    if (gcode.indexOf('X') != -1) targetX = gcode.substring(gcode.indexOf('X') + 1).toFloat();
    if (gcode.indexOf('Y') != -1) targetY = gcode.substring(gcode.indexOf('Y') + 1).toFloat();
    if (gcode.indexOf('Z') != -1) targetZ = gcode.substring(gcode.indexOf('Z') + 1).toFloat();

    zMove(targetZ);

    if (command == 0) {
      Serial.println("Performing rapid (G0) move...");
      rapidMove(targetX, targetY);
      Serial.println("ok");
    } else if (command == 1) {
      Serial.println("Performing linear (G1) move...");
      linearMove(targetX, targetY);
      Serial.println("ok");
    } else if (command == 28) {
      homeAxes();
      Serial.println("ok");
    } else {
      Serial.println("error: Unsupported command");
    }
    Serial.print("Postion: X: ");
    Serial.print(currentX);
    Serial.print(" Y: ");
    Serial.print(currentY);
    Serial.println(". Stopped");
    Serial.println("ok");
  } else if (gcode.startsWith("F")) {
    feedRate = gcode.substring(1).toFloat();
    Serial.println("Feed rate set to " + String(feedRate) + " mm/min.");
    Serial.println("ok");
  }else if (gcode.startsWith("?")){
    Serial.print("<");
    Serial.print("Idle");
    Serial.print("|MPos:");
    Serial.print(currentX);
    Serial.print(",");
    Serial.print(currentY);
    Serial.print(",");
    Serial.print(currentZ);
    Serial.print("|FS:");
    Serial.print(feedRate);
    Serial.print(",");
    Serial.print(currentSpindle);
    Serial.println(">");
    Serial.println("ok");
  }else if(gcode.startsWith("$")) {
      char command = gcode[1];
      if (command == 'I') {
        Serial.println("mCNC");
        Serial.println("ok");
      }else{
        Serial.println("error: Unsupported command");
      }
  }else{
    Serial.println("error: Unsupported command");
  }
}

void setup() {
  pinMode(Z_SOLENOID_PIN, OUTPUT);
  pinMode(X_LIMIT_PIN, INPUT_PULLUP);
  pinMode(Y_LIMIT_PIN, INPUT_PULLUP);
  Serial.begin(115200);
  motorA.setMaxSpeed(G0Speed);
  motorB.setMaxSpeed(G0Speed);
  motorA.setAcceleration(accel);
  motorB.setAcceleration(accel);
  while (!Serial){
    //wait
  }
  Serial.println("ok");
}

void loop() {
  if (Serial.available()) {
    String gcode = Serial.readStringUntil('\n');
    parseGCode(gcode);
  }
}
