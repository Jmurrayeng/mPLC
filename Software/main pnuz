#include <AccelStepper.h>

// Pin definitions
const int MOTOR_A_STEP_PIN = 11;
const int MOTOR_A_DIR_PIN = 12;
const int MOTOR_B_STEP_PIN = 13;
const int MOTOR_B_DIR_PIN = 14;
const int Z_SOLENOID_PIN = 15; // Solenoid valve for pneumatic cylinder
const int SPINDLE_PIN = 16;

// Limit switch pins
const int X_LIMIT_PIN = 9;
const int Y_LIMIT_PIN = 10;

// Motion parameters
float currentX = 0.0, currentY = 0.0;  // Current position in mm
bool zCylinderExtended = false;       // Z-axis state (true = extended, false = retracted)
float stepsPerMM = 100.0;             // Default steps/mm
float feedRate = 600.0;               // Default feed rate in mm/min
float acceleration = 500.0;           // Default acceleration in steps/s²
bool isHomed = false;                 // Homing state

// Create AccelStepper objects for motors A and B
AccelStepper motorA(AccelStepper::DRIVER, MOTOR_A_STEP_PIN, MOTOR_A_DIR_PIN);
AccelStepper motorB(AccelStepper::DRIVER, MOTOR_B_STEP_PIN, MOTOR_B_DIR_PIN);

// Initialize motors
void setupMotors() {
  motorA.setMaxSpeed(2000); // Set max speed (steps/second)
  motorB.setMaxSpeed(2000); 
  motorA.setAcceleration(acceleration); // Set initial acceleration
  motorB.setAcceleration(acceleration); 
}

// Check limit switches and return true if all limits are OK
bool checkLimitSwitches() {
  if (digitalRead(X_LIMIT_PIN) == HIGH || digitalRead(Y_LIMIT_PIN) == HIGH) {
    Serial.println("Limit switch triggered! Motion aborted.");
    return false;
  }
  return true;
}

// Simplified moveHBot function using AccelStepper
bool moveHBot(float deltaX, float deltaY) {
  Serial.println("Moving...");

  // Calculate target steps for each motor
  float motorSpeed = (feedRate / 60) * stepsPerMM;
  int stepsA = (deltaX + deltaY) * stepsPerMM;
  int stepsB = (deltaX - deltaY) * stepsPerMM;

  // Set feed rate and acceleration
  motorA.setMaxSpeed(motorSpeed);
  motorB.setMaxSpeed(motorSpeed);
  motorA.setAcceleration(acceleration);
  motorB.setAcceleration(acceleration);

  // Set target positions for the motors
  motorA.move(stepsA);
  motorB.move(stepsB);

  // Start motion
  while (motorA.isRunning() || motorB.isRunning()) {
    if (!checkLimitSwitches()) {
      motorA.stop(); // Stop motor A
      motorB.stop(); // Stop motor B
      return false;  // Abort motion
    }
    motorA.run();
    motorB.run();
  }

  // Update current position
  currentX += deltaX;
  currentY += deltaY;

  return true;
}

// Control pneumatic cylinder for Z-axis
void controlZCylinder(bool extend) {
  zCylinderExtended = extend;
  digitalWrite(Z_SOLENOID_PIN, extend ? HIGH : LOW);
}

// Perform homing (G28)
void homeAxes() {
  Serial.println("Homing axes...");

  // Move motors towards limit switches
  motorA.setSpeed(-100); // Move towards home
  motorB.setSpeed(-100);

  while (digitalRead(X_LIMIT_PIN) == HIGH || digitalRead(Y_LIMIT_PIN) == HIGH) {
    if (digitalRead(X_LIMIT_PIN) == HIGH) motorA.runSpeed();
    if (digitalRead(Y_LIMIT_PIN) == HIGH) motorB.runSpeed();
  }

  motorA.stop();
  motorB.stop();

  // Retract Z-axis to a known state
  controlZCylinder(false);

  // Reset positions
  currentX = 0.0;
  currentY = 0.0;

  isHomed = true;
  Serial.println("Homing complete.");
}

// Parse G-code
void parseGCode(String gcode) {
  gcode.trim();

  if (gcode.startsWith("G")) {
    int command = gcode.substring(1, gcode.indexOf(' ')).toInt();

    if (command == 0 || command == 1) {  // G0 or G1
      if (!isHomed) {
        Serial.println("Error: Machine not homed. Use G28 to home axes.");
        return;
      }

      float newX = currentX, newY = currentY;
      bool newZState = zCylinderExtended;  // Keep current state by default

      if (gcode.indexOf('X') != -1) newX = gcode.substring(gcode.indexOf('X') + 1).toFloat();
      if (gcode.indexOf('Y') != -1) newY = gcode.substring(gcode.indexOf('Y') + 1).toFloat();
      if (gcode.indexOf('Z') != -1) {
        float zValue = gcode.substring(gcode.indexOf('Z') + 1).toFloat();
        newZState = (zValue > 0);  // Positive Z = extend, negative/zero Z = retract
      }
      if (newZState != zCylinderExtended) {
        controlZCylinder(newZState);
        Serial.println(newZState ? "Z-axis: Cylinder extended." : "Z-axis: Cylinder retracted.");
      }
      // Attempt the move
      if (moveHBot(newX - currentX, newY - currentY)) {
        Serial.print("Movement complete. New position: X=");
        Serial.print(currentX);
        Serial.print(", Y=");
        Serial.println(currentY);
      } else {
        Serial.println("Error: Motion aborted due to limit switch.");
      }
    } else if (command == 28) {  // G28
      homeAxes();
    } else if (command == 50) {  // G50 A<acceleration>
      if (gcode.indexOf('A') != -1) {
        float newAcceleration = gcode.substring(gcode.indexOf('A') + 1).toFloat();
        if (newAcceleration > 0) {
          acceleration = newAcceleration;
          Serial.println("Acceleration set to " + String(acceleration) + " steps/s².");
        } else {
          Serial.println("Error: Invalid acceleration value.");
        }
      }
    } else if (command == 51) {  // G51 S<steps_per_mm>
      if (gcode.indexOf('S') != -1) {
        float newStepsPerMM = gcode.substring(gcode.indexOf('S') + 1).toFloat();
        if (newStepsPerMM > 0) {
          stepsPerMM = newStepsPerMM;
          Serial.println("Steps per mm set to " + String(stepsPerMM) + ".");
        } else {
          Serial.println("Error: Invalid steps per mm value.");
        }
      }
    } else {
      Serial.println("Error: Unknown G-code command: " + String(command));
    }
  } else {
    Serial.println("Error: Invalid command.");
  }
}

void setup() {
  // Initialize pins
  pinMode(Z_SOLENOID_PIN, OUTPUT);
  pinMode(SPINDLE_PIN, OUTPUT);

  pinMode(X_LIMIT_PIN, INPUT_PULLUP);
  pinMode(Y_LIMIT_PIN, INPUT_PULLUP);

  // Initialize serial communication
  Serial.begin(115200);
  Serial.println("H-Bot G-code Interpreter Ready");

  // Initialize motors
  setupMotors();
}

void loop() {
  // Check for incoming serial data
  if (Serial.available()) {
    String gcode = Serial.readStringUntil('\n');
    parseGCode(gcode);
  }
}